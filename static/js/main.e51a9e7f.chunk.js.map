{"version":3,"sources":["components/TableRow.js","components/TableHeader.js","components/TableBody.js","components/Table.js","components/Heading.js","components/FormComponent.js","App.js","reportWebVitals.js","index.js"],"names":["TableRow","props","body","data-name","user","name","Object","entries","map","entry","value","style","onClick","sort","TableHeader","switching","i","x","y","shouldSwitch","table","document","querySelector","rows","length","querySelectorAll","innerHTML","toLowerCase","parentNode","insertBefore","text","TableBody","useState","users","setUsers","useEffect","a","axios","get","data","array","results","first","last","address","location","street","number","city","state","country","postcode","email","phone","cell","age","dob","gender","getData","TableComponent","Table","bordered","Heading","Jumbotron","margin","FormComponent","Form","Group","controlId","Label","Control","type","placeholder","id","Text","className","Button","variant","e","preventDefault","filter","forEach","row","classList","remove","dataset","includes","add","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e51a9e7f.chunk.js","sourcesContent":["import React from 'react'\n\nconst TableRow = (props) => {\n  if (props.body) {\n    return (\n     <tr data-name = {props.user.name}>\n      {Object.entries(props.user).map( entry=> {\n        const [key, value] = entry;\n        return <td>{value}</td>\n      })}\n       {/* <td>{props.user.name}</td>\n        <td>{props.user.address}</td>\n        <td>{props.user.city}</td>\n        <td>{props.user.state}</td>\n        <td>{props.user.country}</td>\n        <td>{props.user.postcode}</td>\n        <td>{props.user.email}</td>\n        <td>{props.user.phone}</td>\n        <td>{props.user.cell}</td>\n        <td>{props.user.age}</td>\n         <td> {props.user.gender}</td> */}\n     </tr>\n    )\n} else {\n  return (\n    <tr style={props.style}>\n      {/* {Object.entries(props.user).map( entry => {\n        const [key, value] = entry;\n        return <th>{key}</th>\n      })} */}\n      <th onClick={props.sort}>Name</th>\n      <th>Address</th> \n      <th>City</th>\n      <th>State</th>\n      <th> Country</th>\n      <th>Post Code</th>\n      <th>E-Mail</th>\n      <th>Phone #</th>\n      <th>Cell #</th>\n      <th>Age</th>\n      <th>Gender</th>\n     </tr>\n  )\n}\n        \n}\n\nexport default TableRow;\n","import React from 'react'\nimport TableRow from './TableRow'\n\nconst TableHeader = () => {\n  const handleSort = () => {\n    const table = document.querySelector('table')\n    let switching, i, x, y, shouldSwitch\n    switching = true;\n    let dir = \"asc\";\n    while(switching) {\n      switching = false;\n      const rows = table.rows;\n      for(i = 1; i < rows.length -1; i++) {\n        shouldSwitch = false\n        x = rows[i].querySelectorAll('td')[0]\n        y = rows[i+1].querySelectorAll('td')[0]\n        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n          shouldSwitch = true;\n          break;\n        }\n      }\n      if (shouldSwitch) {\n        rows[i].parentNode.insertBefore(rows[i+1], rows[i]);\n        switching = true\n      }\n    }\n  }\n  return (\n     <thead>\n       <TableRow body={false} sort={handleSort} style={{ text: 'uppercase'}}/>\n      </thead>\n  )\n}\n\nexport default TableHeader;\n","import React , { useEffect, useState }from 'react';\nimport TableRow from './TableRow'\nimport axios from 'axios'\n\nconst TableBody = () => {\nconst [users, setUsers] = useState([])\n\nuseEffect(()=>{\n  const getData = async ()=> {\n    const data = await axios.get('https://randomuser.me/api/?results=10&nat=us')\n    const array = data.data.results.map((user) => {\n      return {\n        name: `${user.name.first} ${user.name.last}`,\n        address: `${user.location.street.number} ${user.location.street.name}`,\n        city: `${user.location.city}`,\n        state: `${user.location.state}`,\n        country: `${user.location.country}`,\n        postcode: `${user.location.postcode}`,\n        email: `${user.email}`,\n        phone: `${user.phone}`,\n        cell: `${user.cell}`,\n        age: `${user.dob.age}`,\n        gender: `${user.gender}`\n      }\n    })\n    setUsers(array)\n  }\n  getData()\n}, [] )\n  return (\n     <tbody>\n       {users.map((user) => <TableRow  user ={user}  name={user.name} body={true} />)}\n      \n      </tbody>\n  )\n}\n\nexport default TableBody;\n","import React from 'react';\nimport TableHeader from './TableHeader';\nimport TableBody from './TableBody';\nimport Table from 'react-bootstrap/Table';\n\nconst TableComponent = () => {\n  return (\n    <Table bordered>\n     <TableHeader />\n     <TableBody />\n    </Table>\n  )\n}\n\nexport default TableComponent;\n","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\nconst Heading = () => {\n  return (\n    <Jumbotron style= {{margin: \"5px\"}}>\n      <h1>Employee Directory</h1>\n    </Jumbotron>\n  )\n}\n\nexport default Heading;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button'\nimport reactDom from 'react-dom';\n\nconst FormComponent = () => {\n\n  const handleForm = (e) => {\n    e.preventDefault();\n    const filter =document.querySelector('#filterInput').value;\n    const rows = document.querySelectorAll('tbody tr')\n    rows.forEach((row)=> {\n      row.classList.remove('hidden')\n    })\n    rows.forEach((row) => {\n      if(!row.dataset.name.includes(filter)) {\n        row.classList.add('hidden')\n      }\n      }\n      )\n  }\n  return (\n    <Form style= {{margin: \"10px\"}}>\n      <Form.Group controlId=\"filter\">\n        <Form.Label>Search</Form.Label>\n        <Form.Control type= \"text\" placeholder=\"Search By Name\" id=\"filterInput\"/>\n        <Form.Text className=\"text-muted\">Filter By Name</Form.Text>\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\"  onClick={handleForm}>Submit</Button>\n    </Form>\n  )\n}\n\nexport default FormComponent;\n","import TableComponent from './components/Table'\nimport Heading from './components/Heading'\nimport FormComponent from './components/FormComponent'\nimport Container from 'react-bootstrap/Container'\n\nfunction App() {\n  return  (\n    <Container>\n      <Heading />\n      <FormComponent />\n      <TableComponent />\n    </Container>\n    \n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}